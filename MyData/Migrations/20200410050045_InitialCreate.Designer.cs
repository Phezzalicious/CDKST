// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyData.Data;

namespace MyData.Migrations
{
    [DbContext(typeof(CDKSTContext))]
    [Migration("20200410050045_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyData.Data.Models.Competency.Competency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompositeID")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("prose_task_statement")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("term_identifier")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("CompositeID");

                    b.ToTable("Competency");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Competency");
                });

            modelBuilder.Entity("MyData.Data.Models.Competency.KnowledgeSkill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AtomicID")
                        .HasColumnType("int");

                    b.Property<int?>("knowledgeID")
                        .HasColumnType("int");

                    b.Property<int?>("skillID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AtomicID");

                    b.HasIndex("knowledgeID");

                    b.HasIndex("skillID");

                    b.ToTable("KnowledgeSkill");
                });

            modelBuilder.Entity("MyData.Data.Models.Disposition.DispositionInstance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompetencyID")
                        .HasColumnType("int");

                    b.Property<int>("cartesian_index")
                        .HasColumnType("int");

                    b.Property<string>("descriptor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("term_identifier")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("CompetencyID");

                    b.ToTable("DispositionInstance");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            cartesian_index = 1,
                            descriptor = "With Initiative (Nwokeji, Stachel, & Holmes, 2019) / Self-Starter (Clear, 2017) Shows independence. Ability to assess and start activities independently without needing to be told what to do. Willing to take the lead, not waiting for others to start activities or wait for instructions.",
                            term_identifier = "Proactive"
                        },
                        new
                        {
                            ID = 2,
                            cartesian_index = 2,
                            descriptor = "Self-motivated (Clear, 2017) / Self-Directed (Nwokeji et al., 2019) Demonstrates determination to sustain efforts to continue tasks. Direction from others is not required to continue a task toward its desired ends.",
                            term_identifier = "Self-Directed"
                        },
                        new
                        {
                            ID = 3,
                            cartesian_index = 3,
                            descriptor = "With Passion (Nwokeji et al., 2019), (Clear, 2017) / Conviction (Gray, 2015) Strongly committed to and enthusiastic about the realization of the task or goal. Makes the compelling case for the success and benefits of task, project, team or means of achieving goals.",
                            term_identifier = "Passionate"
                        },
                        new
                        {
                            ID = 4,
                            cartesian_index = 4,
                            descriptor = "Purposefully engaged / Purposefulness (Nwokeji et al., 2019), (Clear, 2017) Goal-directed, intentionally acting and committed to achieve organizational and project goals. Reflects an attitude towards the organizational goals served by decisions, work or work products. e.g., Business acumen.",
                            term_identifier = "Purpose-Driven"
                        },
                        new
                        {
                            ID = 5,
                            cartesian_index = 5,
                            descriptor = "With Professionalism / Work ethic (Nwokeji et al., 2019) Reflecting qualities connected with trained and skilled people: Acting honestly, with integrity, commitment, determination and dedication to what is required to achieve a task.",
                            term_identifier = "Professional"
                        },
                        new
                        {
                            ID = 6,
                            cartesian_index = 6,
                            descriptor = "With Judgement / Discretion (Nwokeji et al., 2019) / Responsible (Clear, 2017) / Rectitude (Grey, 2015) Reflect on conditions and concerns, then acting according to what is appropriate to the situation. Making responsible assessments and taking actions using professional knowledge, experience, understanding and common sense. E.g., Responsibility, Professional astuteness (Grey, 2015).",
                            term_identifier = "Responsible"
                        },
                        new
                        {
                            ID = 7,
                            cartesian_index = 7,
                            descriptor = "Adaptable (Nwokeji et al., 2019) / Flexible (Clear, 2017) / Agile (Weber, 2017) Ability or willingness to adjust approach in response to changing conditions or needs.",
                            term_identifier = "Adaptable"
                        },
                        new
                        {
                            ID = 8,
                            cartesian_index = 8,
                            descriptor = "Collaborative (Weber, 2017) / Team Player (Clear, 2017) / Influencing (Nwokeji et al., 2019) Willingness to work with others; engaging appropriate involvement of other persons and organizations helpful to the task. Striving to be respectful and productive in achieving a common goal.",
                            term_identifier = "Collaborative"
                        },
                        new
                        {
                            ID = 9,
                            cartesian_index = 9,
                            descriptor = "Responsive (Weber, 2017) / Respectful (Clear, 2017) Reacting quickly and positively. Respecting the timing needs for communication and actions needed to achieve the goals of the work.",
                            term_identifier = "Responsive"
                        },
                        new
                        {
                            ID = 10,
                            cartesian_index = 10,
                            descriptor = "Attentive to Detail (Weber, 2017), (Nwokeji et al., 2019) Achieves thoroughness and accuracy when accomplishing a task through concern for relevant details.",
                            term_identifier = "Meticulous"
                        });
                });

            modelBuilder.Entity("MyData.Data.Models.Knowledge.KnowledgeElement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("cartesian_index")
                        .HasColumnType("int");

                    b.Property<string>("descriptor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("etymology")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("semiotic_index")
                        .HasColumnType("int");

                    b.Property<string>("term_identifier")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("KnowledgeElement");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            cartesian_index = 1,
                            descriptor = "Coca-Cola Revives and Sustains",
                            etymology = "Ursus maritimus",
                            semiotic_index = 1,
                            term_identifier = "Coke"
                        },
                        new
                        {
                            ID = 2,
                            cartesian_index = 2,
                            descriptor = "That's What I Like' – Variety",
                            etymology = "Marketing where Coke Doesnt",
                            semiotic_index = 2,
                            term_identifier = "Pepsi"
                        },
                        new
                        {
                            ID = 3,
                            cartesian_index = 3,
                            descriptor = "Do the Dew",
                            etymology = "Spy vs Spy",
                            semiotic_index = 3,
                            term_identifier = "Mountain Dew"
                        },
                        new
                        {
                            ID = 4,
                            cartesian_index = 4,
                            descriptor = "The Best Soda you Havent Heard OF",
                            etymology = "Guarana",
                            semiotic_index = 4,
                            term_identifier = "Bawls"
                        },
                        new
                        {
                            ID = 5,
                            cartesian_index = 5,
                            descriptor = "I wish this was a coke!",
                            etymology = "It was just a mirage!",
                            semiotic_index = 5,
                            term_identifier = "RC Cola"
                        });
                });

            modelBuilder.Entity("MyData.Data.Models.Skill.SkillLevel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("cartesian_index")
                        .HasColumnType("int");

                    b.Property<string>("descriptor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("term_identifier")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("SkillLevel");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            cartesian_index = 1,
                            descriptor = "Exhibit memory of previously learned materials by recalling facts, terms, basic concepts, and answers.",
                            term_identifier = "Rembering"
                        },
                        new
                        {
                            ID = 2,
                            cartesian_index = 2,
                            descriptor = "Demonstrate understanding of facts and ideas by organizing, comparing, translating, interpreting, giving descriptions, and stating main ideas.",
                            term_identifier = "Understanding"
                        },
                        new
                        {
                            ID = 3,
                            cartesian_index = 3,
                            descriptor = "Solve problems to new situations by applying acquired knowledge, facts, techniques and rules in a different way.",
                            term_identifier = "Applying"
                        },
                        new
                        {
                            ID = 4,
                            cartesian_index = 4,
                            descriptor = "Examine and break information into parts by identifying motives or causes. Make inferences and find evidence to support generalizations.",
                            term_identifier = "Analyzing"
                        },
                        new
                        {
                            ID = 5,
                            cartesian_index = 5,
                            descriptor = "Present and defend opinions by making judgments about information, validity of ideas, or quality of work based on a set of criteria.",
                            term_identifier = "Evaluating"
                        },
                        new
                        {
                            ID = 6,
                            cartesian_index = 6,
                            descriptor = "Compile information together in a different way by combining elements in a new pattern or proposing alternative solutions.",
                            term_identifier = "Creating"
                        });
                });

            modelBuilder.Entity("MyData.Data.Models.Task.Task", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("MyData.Data.Models.Competency.Atomic", b =>
                {
                    b.HasBaseType("MyData.Data.Models.Competency.Competency");

                    b.HasDiscriminator().HasValue("Atomic");
                });

            modelBuilder.Entity("MyData.Data.Models.Competency.Composite", b =>
                {
                    b.HasBaseType("MyData.Data.Models.Competency.Competency");

                    b.HasDiscriminator().HasValue("Composite");
                });

            modelBuilder.Entity("MyData.Data.Models.Competency.Competency", b =>
                {
                    b.HasOne("MyData.Data.Models.Competency.Composite", null)
                        .WithMany("competencies")
                        .HasForeignKey("CompositeID");
                });

            modelBuilder.Entity("MyData.Data.Models.Competency.KnowledgeSkill", b =>
                {
                    b.HasOne("MyData.Data.Models.Competency.Atomic", null)
                        .WithMany("kspairs")
                        .HasForeignKey("AtomicID");

                    b.HasOne("MyData.Data.Models.Knowledge.KnowledgeElement", "knowledge")
                        .WithMany()
                        .HasForeignKey("knowledgeID");

                    b.HasOne("MyData.Data.Models.Skill.SkillLevel", "skill")
                        .WithMany()
                        .HasForeignKey("skillID");
                });

            modelBuilder.Entity("MyData.Data.Models.Disposition.DispositionInstance", b =>
                {
                    b.HasOne("MyData.Data.Models.Competency.Competency", null)
                        .WithMany("Dispositions")
                        .HasForeignKey("CompetencyID");
                });
#pragma warning restore 612, 618
        }
    }
}
